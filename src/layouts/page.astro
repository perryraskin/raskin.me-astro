---
import "@/styles/colors.css"
import "@/styles/global.css"
import "@/styles/syntax.css"
import "@/styles/layers.css"

import { constants } from "@/config"
import { Theme } from "@/icons"
import dayjs from "dayjs"

type Props = {
  title: string
  description: string
  keywords: string
  image: string
  type: string
  date?: string
  link?: string
}

const { profile } = constants
const props = Astro.props as Props
console.log(import.meta.env.MODE)
---

<html lang="en" color-scheme="auto" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="theme-color" content="#fcfcfc" />
    <meta name="color-scheme" content="light dark" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="index,follow" />
    <meta name="googlebot" content="index,follow" />
    <meta name="title" content={props.title} />
    <meta name="description" content={props.description} />
    <meta name="author" content={profile.name} />
    <meta name="keywords" content={props.keywords} />
    <meta property="og:locale" content="en" />
    <meta property="og:site_name" content={profile.name} />
    <meta property="og:title" content={props.title} />
    <meta property="og:description" content={props.description} />
    <meta property="og:image" content={constants.site + props.image} />
    <meta property="og:image:alt" content={props.title} />
    <meta property="og:type" content={props.type} />
    <meta property="og:url" content={constants.site + Astro.url.pathname} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:creator" content={`@${profile.username}`} />
    <meta name="twitter:site" content={`@${profile.username}`} />
    <meta name="twitter:title" content={props.title} />
    <meta name="twitter:description" content={props.description} />
    <meta name="twitter:url" content={constants.site + Astro.url.pathname} />
    <meta name="twitter:image" content={constants.site + props.image} />
    <meta name="twitter:image:alt" content={props.title} />
    {props.date ? <meta property="article:published_time" content={new Date(props.date).toISOString()} /> : null}
    <link rel="preload" type="font/woff2" href="/fonts/ibm-plex-var.woff2" as="font" crossorigin="anonymous" />
    <link rel="shortcut icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={constants.site + Astro.url.pathname} />
    <title>{props.title}</title>
    <link href="//cdn-images.mailchimp.com/embedcode/classic-061523.css" rel="stylesheet" type="text/css" />
  </head>

  <body class="overflow-y-scroll bg-surface text-default selection:bg-default selection:text-surface">
    <section class="min-h-screen container mx-auto flex max-w-4xl flex-col px-3 py-10 lg:px-16">
      <header>
        <nav class="flex justify-between">
          <ul class="flex flex-wrap items-center gap-2 text-base font-medium sm:gap-6">
            <!-- <li>
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="4" y="4" width="24" height="24" rx="12" fill="#19253d"></rect>
              </svg>
            </li> -->
            {
              constants.links.internal.map(({ name, link }) => (
                <li>
                  <a href={link} class="p-2">
                    {name}
                  </a>
                </li>
              ))
            }
          </ul>

          <button id="toggle-theme" aria-label="Toggle Theme" class="mx-1">
            <Theme />
          </button>
        </nav>
      </header>

      <main class="min-h-xs flex-1 px-2 py-14 sm:py-20">
        <slot />
      </main>

      <footer class="flex flex-col-reverse items-center justify-between gap-8 p-2 text-sm md:flex-row md:gap-32">
        <span class="text-default opacity-70">&copy; {dayjs().year()} Perry Raskin</span>

        <nav>
          <ul class="flex flex-wrap justify-center gap-4 sm:gap-8">
            {
              constants.links.external.map(({ name, link }) => (
                <li>
                  <a href={link}>{name}</a>
                </li>
              ))
            }
          </ul>
        </nav>
      </footer>
    </section>

    <script is:inline>
      if ("serviceWorker" in navigator) navigator.serviceWorker.register("/sw.js")

      const theme = {
        initial: () => {
          if (localStorage.getItem("theme")) return localStorage.getItem("theme")
          if (matchMedia("(prefers-color-scheme: dark)").matches) return "dark"
          return "light"
        },
        current: () => document.documentElement.getAttribute("color-scheme"),
        set: (theme) => {
          document.documentElement.setAttribute("color-scheme", theme)
          localStorage.setItem("theme", theme)
        },
      }

      theme.set(theme.initial())
      const toggle = () => theme.set(theme.current() === "light" ? "dark" : "light")

      document.querySelector("#toggle-theme")?.addEventListener("click", toggle)

      // Listen for changes in the user's preferred color scheme
      matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
        theme.set(e.matches ? "dark" : "light")
      })
    </script>
    <!-- MAILCHIMP -->
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"></script>
    <script type="text/javascript">
      ;(function ($) {
        window.fnames = new Array()
        window.ftypes = new Array()
        fnames[0] = "EMAIL"
        ftypes[0] = "email"
        fnames[1] = "FNAME"
        ftypes[1] = "text"
        fnames[2] = "LNAME"
        ftypes[2] = "text"
        fnames[3] = "ADDRESS"
        ftypes[3] = "address"
        fnames[4] = "PHONE"
        ftypes[4] = "phone"
        fnames[5] = "BIRTHDAY"
        ftypes[5] = "birthday"
      })(jQuery)
      var $mcj = jQuery.noConflict(true)
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const successResponse = document.getElementById("mce-success-response")
        const emailInputWrapper = document.getElementById("mc--email-input-wrapper")
        const subscribeButton = document.querySelector('button[name="subscribe"]')

        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.attributeName === "style") {
              const isVisible = successResponse.style.display !== "none"
              if (isVisible) {
                const isDarkTheme = localStorage.getItem("theme") === "dark"
                successResponse.style.color = isDarkTheme ? "white" : "black"
                emailInputWrapper.style.display = "none"
                subscribeButton.style.display = "none"
              }
            }
          })
        })

        observer.observe(successResponse, { attributes: true })
      })
    </script>
    <script defer src="https://schemakit.ai/e.js"></script>
    {
      import.meta.env.PUBLIC_VERCEL_ENV !== "development" && import.meta.env.PUBLIC_VERCEL_ENV !== "preview" && (
        <script
          src="https://api.pirsch.io/pirsch.js"
          id="pirschjs"
          data-code="YFl95gWLgCz8hOBq25GEf4vpJLdcCJlx"
          defer
        />
      )
    }
  </body>
</html>
